<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HOME on Billo Park</title>
    <link>https://blog.billo.io/</link>
    <description>Recent content in HOME on Billo Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Thu, 06 Aug 2020 00:26:48 +0900</lastBuildDate>
    
	<atom:link href="https://blog.billo.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PSQL TIMESTAMP/AT TIME ZONE 바로 알기</title>
      <link>https://blog.billo.io/devposts/psql_at_time_zone/</link>
      <pubDate>Thu, 06 Aug 2020 00:26:48 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/psql_at_time_zone/</guid>
      <description>회사에서 PSQL 쿼리문을 작성하던 동료분이 이상한 부분이 있다며 불렀다. AT TIME ZONE &#39;Asia/Seoul&#39; 을 사용했을 때와 AT TIME ZONE &#39;UTC+9&#39; 를 사용했을 때 결과가 18시간이나 차이난다고 했다.
postgres=# SHOW timezone; TimeZone ------------  Asia/Seoul (1 row) postgres=# SELECT TIMESTAMP &amp;#39;2020-08-06 12:00:00&amp;#39; AT TIME ZONE &amp;#39;Asia/Seoul&amp;#39;; timezone ---------------------  2020-08-06 12:00:00+09 (1 row) postgres=# SELECT TIMESTAMP &amp;#39;2020-08-06 12:00:00&amp;#39; AT TIME ZONE &amp;#39;UTC+9&amp;#39;; timezone ------------------------  2020-08-07 06:00:00+09 (1 row) 음.. 상식대로라면 둘의 결과가 같아야 할 것 같은데, 왜 다른건지, 뭐가 맞는건지 궁금해졌다.</description>
    </item>
    
    <item>
      <title>PostgreSQL에서 LIMIT/OFFSET 쓸 때 주의할 점</title>
      <link>https://blog.billo.io/devposts/psql_offset_wo_order_by/</link>
      <pubDate>Mon, 03 Aug 2020 22:05:17 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/psql_offset_wo_order_by/</guid>
      <description>여러분이 간단한 게시판을 하나 만들었다고 생각해보자.
SELECT * FROM articles;
를 하면 모든 게시글을 다 가져올 수 있을것이다.
게시글이 많아져서, 게시판에 Pagination을 적용하려고 한다.
한 페이지에 30개정도씩 보여주면 될 것이다.
5페이지 게시글을 보여주려면
SELECT * FROM articles LIMIT 30 OFFSET 120;
을 하면 될 것 같다.
음&amp;hellip; 예상하지 못했던 게시글들이 보인다.
뭐가 문제지..?
 정답은 ORDER BY 절이 빠졌기 때문이다.
ORDER BY 절은 ORDER BY 이후에 표시된 컬럼들을 기준으로 순서대로 정렬해준다.</description>
    </item>
    
    <item>
      <title>IEPEE 서비스 개발후기</title>
      <link>https://blog.billo.io/devposts/iep_ee/</link>
      <pubDate>Fri, 31 Jul 2020 23:47:46 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/iep_ee/</guid>
      <description>이 글을 읽기 전에 로컬 환경에서 Subdomain 테스트하기 를 읽어보시는 것을 추천드린다.  요약하면, lvh.me 서비스는 lvh.me 의 A레코드를 127.0.0.1로 매핑해주는게 다인 서비스이다. 이 서비스를 써보니, 나도 만들어 보고 싶어졌다. 떠올려보면 어려울 게 없어 보였다. 도메인을 하나 사서, A레코드만 잘 등록해주면 될 일 아닌가.
비슷한 서비스인 nip.io 를 보니, 1.2.3.4.nip.io 처럼 매핑하고 싶은 IP를 서브도메인으로 받아서 A레코드로 서비스 하는 곳도 있었다. 이것까지도 쉬워 보였다. 해당 도메인의 DNS 서버를 만들면 되는 일이었다.</description>
    </item>
    
    <item>
      <title>Github Pages &#43; Hugo를 사용한 블로그 구축기</title>
      <link>https://blog.billo.io/devposts/blog_github_page/</link>
      <pubDate>Sat, 23 Nov 2019 22:27:33 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/blog_github_page/</guid>
      <description>Github Pages + Hugo로 결정하게 된 이유 개발 하면서 구글링을 하다보면 많은 개발블로그들을 만날 수 있다. 개발 블로그들을 보면서 필요성을 느끼고 나에게 어떤 종류의 블로그가 필요한지 고민해봤다. 내가 필요했던 조건은 2가지였는데,
 관리를 따로 하지 않아도 될 만큼 수월할 것 커스터마이징이 쉽게 가능할 것  이었다.
우선, 첫번째 조건에 의해서 동적 사이트보다는 정적 사이트를 선호하게 되었다.
일반적으로 웹에서 쉽게 만나볼 수 있는 블로그들은 동적 사이트이다. 동적 사이트란, 사이트 내부에 DB가 존재해서 사이트를 접속하는 시점에 DB에 있는 정보를 읽어와서 접속 시점마다 내용이 다를 수 있는, 그런 형태의 사이트를 의미한다.</description>
    </item>
    
    <item>
      <title>Domain Backorder 후기</title>
      <link>https://blog.billo.io/devposts/domain_backorder/</link>
      <pubDate>Fri, 08 Nov 2019 02:37:11 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/domain_backorder/</guid>
      <description>여러분들이 아는 naver.com,  google.com, billo.io 같은 모든 도메인들은 만료기간 을 가진다. 이 정보들은 WHOIS 서비스 를 이용하면 만료일을 쉽게 조회할 수 있다.
예를 들어 billo.io 도메인의 경우, 2021년 6월 30일까지 인 것을 알 수 있다.
 이 도메인 만료기간 내에 도메인을 갱신하면 계속해서 사용할 수 있다. 만약 만료기간을 넘게 되면 어떻게 될까? 도메인 만료기간 이후에 Renewal Grace Period 가 부여된다. 이 기간은 도메인은 만료되었지만 원한다면 다시 갱신할 수 있는 기간을 의미한다.</description>
    </item>
    
    <item>
      <title>19년도 가을 페스타 후기</title>
      <link>https://blog.billo.io/bgposts/19_fall_festa/</link>
      <pubDate>Sun, 13 Oct 2019 05:46:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/bgposts/19_fall_festa/</guid>
      <description>10월 12일에 보드게임 페스타에 다녀왔다. 이번 페스타도 역시 학여울역 SETEC 에서 진행되었다. 이번으로 페스타 4번째 방문인데, 갈 때 마다 설렌다.
 SETEC은 3호선 학여울역에서 내리면 된다.
 SETEC의 외부에 있는 포스터는 매번 똑같은 모양인 것 같다.
티케팅은 사전등록과 현장등록 두가지 종류가 있다. 사전등록은 행사 전일까지 서울보드게임페스타 사이트에서 진행이 가능하다. 현장등록의 경우 현장에서 현장등록대에서 온라인 등록을 한 후 등록하게 된다. 사전등록과 현장등록 모두 한 줄로 서게 되고, 전화번호 뒷자리를 알려주고 입장팔찌를 얻게 된다.</description>
    </item>
    
    <item>
      <title>로컬 환경에서 Subdomain 테스트하기</title>
      <link>https://blog.billo.io/devposts/local_subdomain/</link>
      <pubDate>Thu, 19 Sep 2019 21:56:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/local_subdomain/</guid>
      <description>서버 환경을 로컬에서 테스트 할 때는 localhost라는 호스트네임을 사용한다. localhost는 일반적인 경우 아무 문제없이 테스트에 사용할 수 있다. 하지만 localhost의 경우, 도메인에 대한 validation이 있는 프로젝트의 경우 예외적으로 처리해줘야 할 수도 있으며 subdomain을 테스트 할 수 없다는 문제가 있다.
일반적으로 이 문제를 해결하기 위해서는 /etc/hosts을 수정한다. /etc/hosts파일은 호스트네임과 IP를 매핑할 때 사용하는 파일이다. 이 파일을 이용해서 원하는 서브도메인을 포함한 호스트네임을 127.0.0.1과 같은 루프백 주소로 매핑을 하면, 서브도메인을 로컬에서 정상적으로 테스트 할 수 있다.</description>
    </item>
    
    <item>
      <title>Golang에서 Structure Validation하기</title>
      <link>https://blog.billo.io/devposts/go_struct_validation/</link>
      <pubDate>Mon, 16 Sep 2019 23:06:52 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_struct_validation/</guid>
      <description>외부에서 Data Object를 받아오는 경우, 특히 신뢰할 수 없는 출처로부터 받아오는 경우에는 해당 Object에 대한 Validation작업이 필수적으로 요구된다. RESTful API를 구현한 Backend Server가 대표적인 예인데, 클라이언트에서 넘겨준 Object는 무조건 신뢰할 수 없는 정보로 간주하고 Validation을 해야 안전한 서버를 구현할 수 있다. 이를 위해, Golang에서도 struct 에 담긴 Data를 검증하는 다양한 방법이 존재한다.
 가장 Naive 하게 구현할 수 있는 방법은 해당 struct에 IsValid() 함수를 구현하는 방법이다. 예를 들어, 아래 형태의 struct를 사용한다고 가정 해 보자.</description>
    </item>
    
    <item>
      <title>ABOUT ME</title>
      <link>https://blog.billo.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.billo.io/about/</guid>
      <description>보드게임을 좋아하는 개발자 박지훈입니다. 💻 초등학교때 집에 있던 HTML 책을 보며 홈페이지를 만들어 본 게 개발 경험의 시작이었습니다. 중학교와 고등학교 때 Python과 Golang을 써보면서 개발에 관심을 가지다가 대학교에서 전산학부에 진학하게 되었습니다. 이후 대학교 3학년까지 다니고 회사를 다니면서 산업기능요원으로 복무했습니다.
2017.12 - 2018.1 Engineer Intern @ SK Hynix
2018.3 - 2020.7 Backend Developer @ Channel Corporation
이후 다시 복학하여 2022년 2월 졸업예정입니다.
🎲 시간이 나면 보드게임을 하며 시간을 보냅니다. 파티게임부터 전략게임까지 모든 종류의 보드게임을 좋아합니다.</description>
    </item>
    
  </channel>
</rss>