<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HOME on Billo Park</title>
    <link>https://blog.billo.io/</link>
    <description>Recent content in HOME on Billo Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    
	<atom:link href="https://blog.billo.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo 블로그에 관련된 글 노출하기</title>
      <link>https://blog.billo.io/devposts/hugo_related_posts/</link>
      <pubDate>Wed, 23 Sep 2020 16:34:08 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/hugo_related_posts/</guid>
      <description>네이버에 블로그를 사이트 등록하고, 사이트에 대한 분석을 읽어보았더니, 내부 링크 관리가 잘 안되고 있다고 적혀있었다. 이를 개선하기 위해서 블로그에 See Also 란을 새로 만들어보기로 결정했다. 내가 사용하고 있는 블로그 플랫폼은 Hugo라서, Hugo에서 연관 포스트를 노출하는 방법을 찾아보았다. Hugo에서는 Related Contents 라고 부르는 개념이었다. 개요는 간단했다. 노출할 연관된 글 목록 코드를 작성하고, 블로그 글에 해당되는 레이아웃에 원하는 위치에 해당 코드를 불러주는게 끝이였다. 관련된 설정은 config 파일에서 가능했다.
하나씩 확인해보면, 우선 연관된 글 을 보여줄 코드를 작성해야 한다.</description>
    </item>
    
    <item>
      <title>Golang ORM, 무엇이 좋을까?</title>
      <link>https://blog.billo.io/devposts/go_orm_recommandation/</link>
      <pubDate>Sun, 20 Sep 2020 02:29:03 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_orm_recommandation/</guid>
      <description>Go언어로 프로그램을 작성하다 보면 가장 고민스러운 부분 중 하나가 Data Layer 구성 일것이다. 웹 서버를 구성할 때 대부분 DB와 통신을 할 텐데, 아직 type-safe 하면서, 많은 star를 가지고, 잘 maintain되는 killer library가 없기 때문이다. 시중에는 참 많은 대안들은 존재한다. 쉽고 강력한 full-featured ORM 기능을 제공하는 gorm, xorm은 runtime에 타입을 비교하여 type-safe 하지 못하고, 표준 라이브러리 database/sql 이나 sqlx는 너무 low-level interface라 많은 어플리케이션 코드를 직접 짜야 하는 단점 등 내 마음에 딱 맞는 라이브러리는 찾기가 어려웠다.</description>
    </item>
    
    <item>
      <title>2020 보드게임콘 온라인 후기</title>
      <link>https://blog.billo.io/bgposts/20_online_con/</link>
      <pubDate>Tue, 15 Sep 2020 20:19:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/bgposts/20_online_con/</guid>
      <description>보드게임콘을 처음 갔던 건 2018년. 코엑스에서 했던 걸로 기억한다. 대 코로나 시대인 지금에서는 상상하기도 어렵지만, 다들 빼곡히 모여서 보드게임을 즐기고, 줄 서서 보드게임을 샀던 기억이 있다. 그렇게 2019년까지만 해도 그렇게 즐겼는데.. 2020년이 되고서는 코로나로 인해 보드게임콘, 보드게임 페스타 모두 취소되었다. 그래서 기대를 하나도 안하다가, 2020년 보드게임콘을 온라인으로 한다는 이야기를 듣고, 바로 사전 예약을 하였다. 사실 온라인으로 보드게임콘을 한다는게 상상이 가지 않았다. 보드게임 행사들은 보드게임을 직접 해보고, 룰 설명도 듣고, 재밌으면 사는 등의 활동이 주를 이루는데, 이런 것들은 대개 온라인으로 옮기기가 굉장히 힘든 것이다.</description>
    </item>
    
    <item>
      <title>보드게이머가 플레잉 카드를 고를 때 중요한 점</title>
      <link>https://blog.billo.io/bgposts/playing_card_design_tip/</link>
      <pubDate>Thu, 10 Sep 2020 23:08:08 +0900</pubDate>
      
      <guid>https://blog.billo.io/bgposts/playing_card_design_tip/</guid>
      <description>플레잉 카드, 즉 트럼프 카드는 생각보다 많은 수가 만들어진다. 펀딩 사이트인 텀블벅 사이트에서는 중복을 포함하여 성공한 펀딩만 28개, 와디즈에서는 5개가 존재한다. 펀딩이 아닌 방식으로 제작되는 경우를 포함하면, 꽤 많은 수의 트럼프 카드가 만들어진다. 이렇게 많은 플레잉 카드들은 디자이너들이 판매할 아트웍으로써, 홍보하기 위한 수단등 다양한 목적으로 만들어진다. 개발자인 나로서는 AWS(아마존 웹 서비스) 에서 주최하는 행사인 AWS Summit Seoul에서 굿즈로 AWS 플레잉 카드를 받은 적이 있다.
이렇게 많이 만들어진 플레잉 카드들은 누가 사는걸까?</description>
    </item>
    
    <item>
      <title>Golang 에서의 명명 규칙</title>
      <link>https://blog.billo.io/devposts/golang_naming_convention/</link>
      <pubDate>Tue, 08 Sep 2020 21:23:47 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/golang_naming_convention/</guid>
      <description>무언가에 이름을 지을 때는 우리가 공통적으로 짓는 규칙들이 있다. 한국에서는 사람 이름을 대부분 세글자로 짓는다던지, 멍멍이와 같이 반려견의 이름으로 사용되는 것들은 피한다던지, 발음하기 어려운 단어를 피한다던지 하는 것들이다. 이렇게 규칙을 가지고 이름을 짓게 되면, 나중에 어떤 이름을 보아도 이게 사람 이름인지, 반려견 이름인지, 회사 이름인지 어느정도 구분이 가능하다.
프로그래밍의 세계에서 이름짓기도 마찬가지다. 우리는 이를 명명규칙이라고 하는데, 이름을 지을 때 공통적으로 지키는 규칙들을 이야기한다. 언어마다 일반적으로 가이드 되는 패턴들이 있고, 대부분 이에 맞춰서 사용하는 것을 추천한다.</description>
    </item>
    
    <item>
      <title>온라인 보드게임 플랫폼: Tabletop Simulator</title>
      <link>https://blog.billo.io/bgposts/table_top_simulator/</link>
      <pubDate>Wed, 02 Sep 2020 19:19:54 +0900</pubDate>
      
      <guid>https://blog.billo.io/bgposts/table_top_simulator/</guid>
      <description>이 글을 쓰는 시점에서는 코로나19가 대 유행이다. 바깥에 나가는 것을 자제해야하고, 어디를 가든 마스크를 꼭 써야 한다. 보드게임도 마찬가지이다. 외출을 자제하기에 보드게임방에 가기도 부담스럽고, 보드게임을 하면서도 밀접하게 접촉이 일어나므로 찝찝하다. 이럴 때 온라인 보드게임 은 아주 좋은 대안이다. 밖에 나가지 않아도 되고, 확진자가 다녀갔을지 마음조리지 않아도 되는, 온라인 보드게임 플랫폼 테이블탑 시뮬레이터 를 소개한다.
 테이블탑 시뮬레이터는 스팀에서 다운로드 받을 수 있는 게임 플랫폼이다. 테이블탑 시뮬레이터를 실행시키고, 플레이 할 보드게임을 선택하고, 해당 보드게임을 즐기는, 그런 구조이다.</description>
    </item>
    
    <item>
      <title>Github Profile에 자기소개 노출하기</title>
      <link>https://blog.billo.io/devposts/github_profile_repo/</link>
      <pubDate>Sun, 30 Aug 2020 23:44:16 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/github_profile_repo/</guid>
      <description>최근 깃헙에 추가된 기능중에, 자기 프로필에 README 노출하기 기능이 있다.
 위의 사진처럼, 내 깃헙 프로필에 내가 노출하고 싶은 내용을 마크다운으로 노출할 수 있다.
이를 하는 방법은 상당히 간단하다.
바로 자신의 깃헙 닉네임과 같은 이름의 레포지토리를 만들고, 거기에 README.md 파일을 만들면 된다.
위의 프로필에 사용된 레포를 들어가서 보면 프로필에 노출되는 것과 같은 내용이 보인다.
 이 특수 레포지토리를 활용하면, 개성있게 자신의 프로필을 꾸밀 수 있다.</description>
    </item>
    
    <item>
      <title>Dooray로 내 도메인 메일 무료로 운영하기</title>
      <link>https://blog.billo.io/devposts/dooray_free_mail/</link>
      <pubDate>Mon, 17 Aug 2020 20:37:52 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/dooray_free_mail/</guid>
      <description>내 도메인으로 메일을 운영해보자 신박한 서비스를 위해, 아니면 개인 PR을 위해, 혹은 그냥 예뻐보여서 도메인을 산 당신. 멋드러지게 꾸민 사이트 하단에
contact me: example@gmail.com 적혀진 이메일 주소가 gmail이라면? 흠.. 뭔가 아쉽다. 도메인도 산 김에, 구매한 도메인으로 된 메일이 있으면 외우기도 쉽고, 더 전문적으로 보일 것 같다.
그래서 도메인을 위한 메일 서버를 직접 운영하기로 마음먹고 방법을 찾아본다면? 생각보다 쉽지 않을것이다. Postfix며 Dovecot이며 알아야 할 것도 엄청 많고, 설정 파일도 잘 수정해야 한다.</description>
    </item>
    
    <item>
      <title>Golang에서 nullable한 값 잘 처리하기</title>
      <link>https://blog.billo.io/devposts/nil_for_go/</link>
      <pubDate>Sat, 08 Aug 2020 00:11:15 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/nil_for_go/</guid>
      <description>Go언어에는 zero value 라는 것이 있다. 변수를 선언할 때, 따로 특정 값을 할당하지 않으면 자동으로 부여되는 값을 zero value 라고 한다.
string의 경우에는 &amp;quot;&amp;quot;,
boolean은 false,
숫자형은 0,
함수, 포인터, 인터페이스, slice, 채널, 맵은 nil
이 zero value이다.
보면 알다시피 string, boolean, 숫자 모두 nil (다른 언어에서의 null)이 아닌 다른값들이 zero value로 선언되어 있기 때문에, 따로 초기화 하지 않아도 Nil Pointer Exception 이 나지 않는다. 이런 장점이 있는 반면, 값의 존재여부를 가지고 로직이 짜여있는 경우, 문제가 생길 수 있다.</description>
    </item>
    
    <item>
      <title>PSQL TIMESTAMP/AT TIME ZONE 바로 알기</title>
      <link>https://blog.billo.io/devposts/psql_at_time_zone/</link>
      <pubDate>Thu, 06 Aug 2020 00:26:48 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/psql_at_time_zone/</guid>
      <description>회사에서 PSQL 쿼리문을 작성하던 동료분이 이상한 부분이 있다며 불렀다. AT TIME ZONE &#39;Asia/Seoul&#39; 을 사용했을 때와 AT TIME ZONE &#39;UTC+9&#39; 를 사용했을 때 결과가 18시간이나 차이난다고 했다.
postgres=# SHOW timezone; TimeZone ------------  Asia/Seoul (1 row) postgres=# SELECT TIMESTAMP &amp;#39;2020-08-06 12:00:00&amp;#39; AT TIME ZONE &amp;#39;Asia/Seoul&amp;#39;; timezone ---------------------  2020-08-06 12:00:00+09 (1 row) postgres=# SELECT TIMESTAMP &amp;#39;2020-08-06 12:00:00&amp;#39; AT TIME ZONE &amp;#39;UTC+9&amp;#39;; timezone ------------------------  2020-08-07 06:00:00+09 (1 row) 음.. 상식대로라면 둘의 결과가 같아야 할 것 같은데, 왜 다른건지, 뭐가 맞는건지 궁금해졌다.</description>
    </item>
    
    <item>
      <title>PostgreSQL에서 LIMIT/OFFSET 쓸 때 주의할 점</title>
      <link>https://blog.billo.io/devposts/psql_offset_wo_order_by/</link>
      <pubDate>Mon, 03 Aug 2020 22:05:17 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/psql_offset_wo_order_by/</guid>
      <description>여러분이 간단한 게시판을 하나 만들었다고 생각해보자.
SELECT * FROM articles;
를 하면 모든 게시글을 다 가져올 수 있을것이다.
게시글이 많아져서, 게시판에 Pagination을 적용하려고 한다.
한 페이지에 30개정도씩 보여주면 될 것이다.
5페이지 게시글을 보여주려면
SELECT * FROM articles LIMIT 30 OFFSET 120;
을 하면 될 것 같다.
음&amp;hellip; 예상하지 못했던 게시글들이 보인다.
뭐가 문제지..?
 정답은 ORDER BY 절이 빠졌기 때문이다.
ORDER BY 절은 ORDER BY 이후에 표시된 컬럼들을 기준으로 순서대로 정렬해준다.</description>
    </item>
    
    <item>
      <title>IEPEE 서비스 개발후기</title>
      <link>https://blog.billo.io/devposts/iep_ee/</link>
      <pubDate>Fri, 31 Jul 2020 23:47:46 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/iep_ee/</guid>
      <description>이 글을 읽기 전에 로컬 환경에서 Subdomain 테스트하기 를 읽어보시는 것을 추천드린다.  요약하면, lvh.me 서비스는 lvh.me 의 A레코드를 127.0.0.1로 매핑해주는게 다인 서비스이다. 이 서비스를 써보니, 나도 만들어 보고 싶어졌다. 떠올려보면 어려울 게 없어 보였다. 도메인을 하나 사서, A레코드만 잘 등록해주면 될 일 아닌가.
비슷한 서비스인 nip.io 를 보니, 1.2.3.4.nip.io 처럼 매핑하고 싶은 IP를 서브도메인으로 받아서 A레코드로 서비스 하는 곳도 있었다. 이것까지도 쉬워 보였다. 해당 도메인의 DNS 서버를 만들면 되는 일이었다.</description>
    </item>
    
    <item>
      <title>Github Pages &#43; Hugo를 사용한 블로그 구축기</title>
      <link>https://blog.billo.io/devposts/blog_github_page/</link>
      <pubDate>Sat, 23 Nov 2019 22:27:33 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/blog_github_page/</guid>
      <description>Github Pages + Hugo로 결정하게 된 이유 개발 하면서 구글링을 하다보면 많은 개발블로그들을 만날 수 있다. 개발 블로그들을 보면서 필요성을 느끼고 나에게 어떤 종류의 블로그가 필요한지 고민해봤다. 내가 필요했던 조건은 2가지였는데,
 관리를 따로 하지 않아도 될 만큼 수월할 것 커스터마이징이 쉽게 가능할 것  이었다.
우선, 첫번째 조건에 의해서 동적 사이트보다는 정적 사이트를 선호하게 되었다.
일반적으로 웹에서 쉽게 만나볼 수 있는 블로그들은 동적 사이트이다. 동적 사이트란, 사이트 내부에 DB가 존재해서 사이트를 접속하는 시점에 DB에 있는 정보를 읽어와서 접속 시점마다 내용이 다를 수 있는, 그런 형태의 사이트를 의미한다.</description>
    </item>
    
    <item>
      <title>Domain Backorder 후기</title>
      <link>https://blog.billo.io/devposts/domain_backorder/</link>
      <pubDate>Fri, 08 Nov 2019 02:37:11 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/domain_backorder/</guid>
      <description>여러분들이 아는 naver.com,  google.com, billo.io 같은 모든 도메인들은 만료기간 을 가진다. 이 정보들은 WHOIS 서비스 를 이용하면 만료일을 쉽게 조회할 수 있다.
예를 들어 billo.io 도메인의 경우, 2021년 6월 30일까지 인 것을 알 수 있다.
 이 도메인 만료기간 내에 도메인을 갱신하면 계속해서 사용할 수 있다. 만약 만료기간을 넘게 되면 어떻게 될까? 도메인 만료기간 이후에 Renewal Grace Period 가 부여된다. 이 기간은 도메인은 만료되었지만 원한다면 다시 갱신할 수 있는 기간을 의미한다.</description>
    </item>
    
    <item>
      <title>19년도 가을 페스타 후기</title>
      <link>https://blog.billo.io/bgposts/19_fall_festa/</link>
      <pubDate>Sun, 13 Oct 2019 05:46:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/bgposts/19_fall_festa/</guid>
      <description>10월 12일에 보드게임 페스타에 다녀왔다. 이번 페스타도 역시 학여울역 SETEC 에서 진행되었다. 이번으로 페스타 4번째 방문인데, 갈 때 마다 설렌다.
 SETEC은 3호선 학여울역에서 내리면 된다.
 SETEC의 외부에 있는 포스터는 매번 똑같은 모양인 것 같다.
티케팅은 사전등록과 현장등록 두가지 종류가 있다. 사전등록은 행사 전일까지 서울보드게임페스타 사이트에서 진행이 가능하다. 현장등록의 경우 현장에서 현장등록대에서 온라인 등록을 한 후 등록하게 된다. 사전등록과 현장등록 모두 한 줄로 서게 되고, 전화번호 뒷자리를 알려주고 입장팔찌를 얻게 된다.</description>
    </item>
    
    <item>
      <title>로컬 환경에서 Subdomain 테스트하기</title>
      <link>https://blog.billo.io/devposts/local_subdomain/</link>
      <pubDate>Thu, 19 Sep 2019 21:56:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/local_subdomain/</guid>
      <description>서버 환경을 로컬에서 테스트 할 때는 localhost라는 호스트네임을 사용한다. localhost는 일반적인 경우 아무 문제없이 테스트에 사용할 수 있다. 하지만 localhost의 경우, 도메인에 대한 validation이 있는 프로젝트의 경우 예외적으로 처리해줘야 할 수도 있으며 subdomain을 테스트 할 수 없다는 문제가 있다.
일반적으로 이 문제를 해결하기 위해서는 /etc/hosts을 수정한다. /etc/hosts파일은 호스트네임과 IP를 매핑할 때 사용하는 파일이다. 이 파일을 이용해서 원하는 서브도메인을 포함한 호스트네임을 127.0.0.1과 같은 루프백 주소로 매핑을 하면, 서브도메인을 로컬에서 정상적으로 테스트 할 수 있다.</description>
    </item>
    
    <item>
      <title>Golang에서 Structure Validation하기</title>
      <link>https://blog.billo.io/devposts/go_struct_validation/</link>
      <pubDate>Mon, 16 Sep 2019 23:06:52 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_struct_validation/</guid>
      <description>외부에서 Data Object를 받아오는 경우, 특히 신뢰할 수 없는 출처로부터 받아오는 경우에는 해당 Object에 대한 Validation작업이 필수적으로 요구된다. RESTful API를 구현한 Backend Server가 대표적인 예인데, 클라이언트에서 넘겨준 Object는 무조건 신뢰할 수 없는 정보로 간주하고 Validation을 해야 안전한 서버를 구현할 수 있다. 이를 위해, Golang에서도 struct 에 담긴 Data를 검증하는 다양한 방법이 존재한다.
 가장 Naive 하게 구현할 수 있는 방법은 해당 struct에 IsValid() 함수를 구현하는 방법이다. 예를 들어, 아래 형태의 struct를 사용한다고 가정 해 보자.</description>
    </item>
    
    <item>
      <title>ABOUT ME</title>
      <link>https://blog.billo.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://blog.billo.io/about/</guid>
      <description>보드게임을 좋아하는 개발자 박지훈입니다. 💻 초등학교때 집에 있던 HTML 책을 보며 홈페이지를 만들어 본 게 개발 경험의 시작이었습니다. 중학교와 고등학교 때 Python과 Golang을 써보면서 개발에 관심을 가지다가 대학교에서 전산학부에 진학하게 되었습니다. 이후 대학교 3학년까지 다니고 회사를 다니면서 산업기능요원으로 복무했습니다.
2017.12 - 2018.1 Engineer Intern @ SK Hynix
2018.3 - 2020.7 Backend Developer @ Channel Corporation
이후 다시 복학하여 2022년 2월 졸업예정입니다.
🎲 시간이 나면 보드게임을 하며 시간을 보냅니다. 파티게임부터 전략게임까지 모든 종류의 보드게임을 좋아합니다.</description>
    </item>
    
  </channel>
</rss>