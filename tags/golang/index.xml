<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Billo Park</title>
    <link>https://blog.billo.io/tags/golang/</link>
    <description>Recent content in golang on Billo Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 12 Mar 2021 16:19:19 +0900</lastBuildDate>
    
	<atom:link href="https://blog.billo.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go에서 nil 비교할 때 주의해야 하는 점</title>
      <link>https://blog.billo.io/devposts/typed_nil_go/</link>
      <pubDate>Fri, 12 Mar 2021 16:19:19 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/typed_nil_go/</guid>
      <description>nil != nil
누구나 이 명제를 보면 항상 거짓이라고 생각할 것이다. 하지만 놀랍게도, Go에서는 참이 되는 경우도 있다.
아래의 상황을 보자
package main import ( &amp;#34;fmt&amp;#34; ) type A struct {} var condition = false func billo() interface{} { var a *A = nil if condition { a = &amp;amp;A{} } return a } func main() { fmt.Println(billo() == nil) } 이 경우에 출력값을 잠시 고민해보자.
많은 분들이 true라고 생각하겠지만, 사실은 false 이다.</description>
    </item>
    
    <item>
      <title>스타 19k 받은 기술 문서 번역하기</title>
      <link>https://blog.billo.io/devposts/translate_dev_doc/</link>
      <pubDate>Thu, 12 Nov 2020 14:35:05 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/translate_dev_doc/</guid>
      <description>go언어로 프로젝트를 구상하려고 하면 가장 먼저 막히는 부분은 프로젝트를 어떻게 구성해야 하지? 일 것이다. go언어는 정해진 프로젝트 구조가 없다. 어떻게 폴더 구조를 만들 것인지, 어떻게 패키지 구조를 구성할지는 Circular import를 하지 않는다면 아주 자유롭다. 자유롭다는 것은 항상 좋을 것 같지만 막상 직접 구조를 고민하다보면 꼭 좋은 것 만은 아니라는 것을 알 수 있다.
이럴 때 필요한 것이 레퍼런스. Go로 된 다른 프로젝트들의 구조를 찾아보면, 놀랍도록 다양하다는 것을 알 수 있다. 프로젝트의 root에 모든 파일을 다 늘어놓은 프로젝트부터, 나름대로 철학을 가지고 구조화한 프로젝트 까지 아주 다양하다.</description>
    </item>
    
    <item>
      <title>Golang ORM, 무엇이 좋을까?</title>
      <link>https://blog.billo.io/devposts/go_orm_recommandation/</link>
      <pubDate>Sun, 20 Sep 2020 02:29:03 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_orm_recommandation/</guid>
      <description>Go언어로 프로그램을 작성하다 보면 가장 고민스러운 부분 중 하나가 Data Layer 구성 일것이다. 웹 서버를 구성할 때 대부분 DB와 통신을 할 텐데, 아직 type-safe 하면서, 많은 star를 가지고, 잘 maintain되는 killer library가 없기 때문이다. 시중에는 참 많은 대안들은 존재한다. 쉽고 강력한 full-featured ORM 기능을 제공하는 gorm, xorm은 runtime에 타입을 비교하여 type-safe 하지 못하고, 표준 라이브러리 database/sql 이나 sqlx는 너무 low-level interface라 많은 어플리케이션 코드를 직접 짜야 하는 단점 등 내 마음에 딱 맞는 라이브러리는 찾기가 어려웠다.</description>
    </item>
    
    <item>
      <title>Golang 에서의 명명 규칙</title>
      <link>https://blog.billo.io/devposts/golang_naming_convention/</link>
      <pubDate>Tue, 08 Sep 2020 21:23:47 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/golang_naming_convention/</guid>
      <description>무언가에 이름을 지을 때는 우리가 공통적으로 짓는 규칙들이 있다. 한국에서는 사람 이름을 대부분 세글자로 짓는다던지, 멍멍이와 같이 반려견의 이름으로 사용되는 것들은 피한다던지, 발음하기 어려운 단어를 피한다던지 하는 것들이다. 이렇게 규칙을 가지고 이름을 짓게 되면, 나중에 어떤 이름을 보아도 이게 사람 이름인지, 반려견 이름인지, 회사 이름인지 어느정도 구분이 가능하다.
프로그래밍의 세계에서 이름짓기도 마찬가지다. 우리는 이를 명명규칙이라고 하는데, 이름을 지을 때 공통적으로 지키는 규칙들을 이야기한다. 언어마다 일반적으로 가이드 되는 패턴들이 있고, 대부분 이에 맞춰서 사용하는 것을 추천한다.</description>
    </item>
    
    <item>
      <title>Golang에서 nullable한 값 잘 처리하기</title>
      <link>https://blog.billo.io/devposts/nil_for_go/</link>
      <pubDate>Sat, 08 Aug 2020 00:11:15 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/nil_for_go/</guid>
      <description>Go언어에는 zero value 라는 것이 있다. 변수를 선언할 때, 따로 특정 값을 할당하지 않으면 자동으로 부여되는 값을 zero value 라고 한다.
string의 경우에는 &amp;quot;&amp;quot;,
boolean은 false,
숫자형은 0,
함수, 포인터, 인터페이스, slice, 채널, 맵은 nil
이 zero value이다.
보면 알다시피 string, boolean, 숫자 모두 nil (다른 언어에서의 null)이 아닌 다른값들이 zero value로 선언되어 있기 때문에, 따로 초기화 하지 않아도 Nil Pointer Exception 이 나지 않는다. 이런 장점이 있는 반면, 값의 존재여부를 가지고 로직이 짜여있는 경우, 문제가 생길 수 있다.</description>
    </item>
    
    <item>
      <title>Golang에서 Structure Validation하기</title>
      <link>https://blog.billo.io/devposts/go_struct_validation/</link>
      <pubDate>Mon, 16 Sep 2019 23:06:52 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_struct_validation/</guid>
      <description>외부에서 Data Object를 받아오는 경우, 특히 신뢰할 수 없는 출처로부터 받아오는 경우에는 해당 Object에 대한 Validation작업이 필수적으로 요구된다. RESTful API를 구현한 Backend Server가 대표적인 예인데, 클라이언트에서 넘겨준 Object는 무조건 신뢰할 수 없는 정보로 간주하고 Validation을 해야 안전한 서버를 구현할 수 있다. 이를 위해, Golang에서도 struct 에 담긴 Data를 검증하는 다양한 방법이 존재한다.
 가장 Naive 하게 구현할 수 있는 방법은 해당 struct에 IsValid() 함수를 구현하는 방법이다. 예를 들어, 아래 형태의 struct를 사용한다고 가정 해 보자.</description>
    </item>
    
  </channel>
</rss>