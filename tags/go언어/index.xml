<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go언어 on Billo Park</title>
    <link>https://blog.billo.io/tags/go%EC%96%B8%EC%96%B4/</link>
    <description>Recent content in go언어 on Billo Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 31 Mar 2021 14:16:41 +0900</lastBuildDate>
    
	<atom:link href="https://blog.billo.io/tags/go%EC%96%B8%EC%96%B4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go언어 &#39;...&#39; 자세히 알아보기</title>
      <link>https://blog.billo.io/devposts/golang_ellipsis_deep_dive/</link>
      <pubDate>Wed, 31 Mar 2021 14:16:41 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/golang_ellipsis_deep_dive/</guid>
      <description>fmt.Printf 함수를 떠올려보자. 이 함수는, 첫번째 인자로 format string을 받고, 이후 자리는 첫번째 인자에서 등장한 각각의 변수를 넣어준다. 예를들어, &amp;quot;Hi, %s!&amp;quot; 를 format string으로 사용한다면 1개의 문자열 변수가 이후 주어저야하고, &amp;quot;Hi, %s! My name is %s. 의 경우에는 2개의 문자열 변수가 주어져야한다. 즉, 상황에 맞추어서 함수 호출 시 사용되는 파라미터의 갯수가 달라진다는 것이다. 일반적으로 우리는 이런 함수를 가변인자 함수(variadic function) 라고 부른다.
Golang에서는 가변인자 함수를 어떻게 만들 수 있을까? 이 때 우리가 사용하는 것이 .</description>
    </item>
    
    <item>
      <title>Go에서 nil 비교할 때 주의해야 하는 점</title>
      <link>https://blog.billo.io/devposts/typed_nil_go/</link>
      <pubDate>Fri, 12 Mar 2021 16:19:19 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/typed_nil_go/</guid>
      <description>nil != nil
누구나 이 명제를 보면 항상 거짓이라고 생각할 것이다. 하지만 놀랍게도, Go에서는 참이 되는 경우도 있다.
아래의 상황을 보자
package main import ( &amp;#34;fmt&amp;#34; ) type A struct {} var condition = false func billo() interface{} { var a *A = nil if condition { a = &amp;amp;A{} } return a } func main() { fmt.Println(billo() == nil) } 이 경우에 출력값을 잠시 고민해보자.
많은 분들이 true라고 생각하겠지만, 사실은 false 이다.</description>
    </item>
    
    <item>
      <title>스타 19k 받은 기술 문서 번역하기</title>
      <link>https://blog.billo.io/devposts/translate_dev_doc/</link>
      <pubDate>Thu, 12 Nov 2020 14:35:05 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/translate_dev_doc/</guid>
      <description>go언어로 프로젝트를 구상하려고 하면 가장 먼저 막히는 부분은 프로젝트를 어떻게 구성해야 하지? 일 것이다. go언어는 정해진 프로젝트 구조가 없다. 어떻게 폴더 구조를 만들 것인지, 어떻게 패키지 구조를 구성할지는 Circular import를 하지 않는다면 아주 자유롭다. 자유롭다는 것은 항상 좋을 것 같지만 막상 직접 구조를 고민하다보면 꼭 좋은 것 만은 아니라는 것을 알 수 있다.
이럴 때 필요한 것이 레퍼런스. Go로 된 다른 프로젝트들의 구조를 찾아보면, 놀랍도록 다양하다는 것을 알 수 있다. 프로젝트의 root에 모든 파일을 다 늘어놓은 프로젝트부터, 나름대로 철학을 가지고 구조화한 프로젝트 까지 아주 다양하다.</description>
    </item>
    
    <item>
      <title>Golang 에서의 명명 규칙</title>
      <link>https://blog.billo.io/devposts/golang_naming_convention/</link>
      <pubDate>Tue, 08 Sep 2020 21:23:47 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/golang_naming_convention/</guid>
      <description>무언가에 이름을 지을 때는 우리가 공통적으로 짓는 규칙들이 있다. 한국에서는 사람 이름을 대부분 세글자로 짓는다던지, 멍멍이와 같이 반려견의 이름으로 사용되는 것들은 피한다던지, 발음하기 어려운 단어를 피한다던지 하는 것들이다. 이렇게 규칙을 가지고 이름을 짓게 되면, 나중에 어떤 이름을 보아도 이게 사람 이름인지, 반려견 이름인지, 회사 이름인지 어느정도 구분이 가능하다.
프로그래밍의 세계에서 이름짓기도 마찬가지다. 우리는 이를 명명규칙이라고 하는데, 이름을 지을 때 공통적으로 지키는 규칙들을 이야기한다. 언어마다 일반적으로 가이드 되는 패턴들이 있고, 대부분 이에 맞춰서 사용하는 것을 추천한다.</description>
    </item>
    
  </channel>
</rss>