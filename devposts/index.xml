<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DEVELOPMENT on Billo Park</title>
    <link>https://blog.billo.io/devposts/</link>
    <description>Recent content in DEVELOPMENT on Billo Park</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Fri, 08 Nov 2019 02:37:11 +0900</lastBuildDate>
    
	<atom:link href="https://blog.billo.io/devposts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Domain Backorder 후기</title>
      <link>https://blog.billo.io/devposts/domain_backorder/</link>
      <pubDate>Fri, 08 Nov 2019 02:37:11 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/domain_backorder/</guid>
      <description>여러분들이 아는 naver.com, google.com, billo.io 같은 모든 도메인들은 만료기간 을 가진다. 이 정보들은 WHOIS 서비스 를 이용하면 만료일을 쉽게 조회할 수 있다.
예를 들어 billo.io 도메인의 경우, 2021년 6월 30일까지 인 것을 알 수 있다.
이 도메인 만료기간 내에 도메인을 갱신하면 계속해서 사용할 수 있다. 만약 만료기간을 넘게 되면 어떻게 될까? 도메인 만료기간 이후에 Renewal Grace Period 가 부여된다. 이 기간은 도메인은 만료되었지만 원한다면 다시 갱신할 수 있는 기간을 의미한다. 도메인 별로 기간은 상이하나, 약 30일-40일 정도를 제공한다.</description>
    </item>
    
    <item>
      <title>로컬 환경에서 Subdomain 테스트하기</title>
      <link>https://blog.billo.io/devposts/local_subdomain/</link>
      <pubDate>Thu, 19 Sep 2019 21:56:25 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/local_subdomain/</guid>
      <description>서버 환경을 로컬에서 테스트 할 때는 localhost라는 호스트네임을 사용한다. localhost는 일반적인 경우 아무 문제없이 테스트에 사용할 수 있다. 하지만 localhost의 경우, 도메인에 대한 validation이 있는 프로젝트의 경우 예외적으로 처리해줘야 할 수도 있으며 subdomain을 테스트 할 수 없다는 문제가 있다.
일반적으로 이 문제를 해결하기 위해서는 /etc/hosts을 수정한다. /etc/hosts파일은 호스트네임과 IP를 매핑할 때 사용하는 파일이다. 이 파일을 이용해서 원하는 서브도메인을 포함한 호스트네임을 127.0.0.1과 같은 루프백 주소로 매핑을 하면, 서브도메인을 로컬에서 정상적으로 테스트 할 수 있다.</description>
    </item>
    
    <item>
      <title>Golang에서 Structure Validation하기</title>
      <link>https://blog.billo.io/devposts/go_struct_validation/</link>
      <pubDate>Mon, 16 Sep 2019 23:06:52 +0900</pubDate>
      
      <guid>https://blog.billo.io/devposts/go_struct_validation/</guid>
      <description>외부에서 Data Object를 받아오는 경우, 특히 신뢰할 수 없는 출처로부터 받아오는 경우에는 해당 Object에 대한 Validation작업이 필수적으로 요구된다. RESTful API를 구현한 Backend Server가 대표적인 예인데, 클라이언트에서 넘겨준 Object는 무조건 신뢰할 수 없는 정보로 간주하고 Validation을 해야 안전한 서버를 구현할 수 있다. 이를 위해, Golang에서도 struct 에 담긴 Data를 검증하는 다양한 방법이 존재한다.
가장 Naive 하게 구현할 수 있는 방법은 해당 struct에 IsValid() 함수를 구현하는 방법이다. 예를 들어, 아래 형태의 struct를 사용한다고 가정 해 보자.</description>
    </item>
    
  </channel>
</rss>